worker_processes  1;
error_log logs/error.log;

events {
    worker_connections 1024;
}

http {
    lua_package_path '$prefix/scripts/?.lua;;';
    limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;
    init_by_lua 'uuid = require("uuid")';

    upstream luwin {
        server 10.0.2.2:18884;
    }

    server {
        listen 8080;
        set_by_lua $res '
            local reqId = ngx.req.get_headers()["x-request-id"]
            if not reqId then
                ngx.req.set_header("X-Request-Id", uuid())
            end
        ';
        header_filter_by_lua 'ngx.header.Server = "EdgeNX"';
        default_type text/html;

        location /test {
            limit_req zone=one burst=5;
            content_by_lua '
                ngx.say("<p>hello, world</p>")
                ngx.say(ngx.req.get_headers()["x-request-id"])
            ';
        }

        location /configman/ {
            rewrite ^/configman(/.*)$ $1 break;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Port 80;
            proxy_pass http://luwin/;
            proxy_redirect off;
        }

        location /bin/ {
            rewrite ^/bin(/.*)$ $1 break;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Port 80;
            proxy_pass http://10.0.2.2:25493;
            proxy_redirect default;
        }

        location = /upstreams {
            allow 10.0.2.2;
            deny all;
            
            default_type text/plain;
            content_by_lua '
                local concat = table.concat
                local upstream = require "ngx.upstream"
                local get_servers = upstream.get_servers
                local get_upstreams = upstream.get_upstreams

                local us = get_upstreams()
                for _, u in ipairs(us) do
                    ngx.say("upstream ", u, ":")
                    local srvs, err = get_servers(u)
                    if not srvs then
                        ngx.say("failed to get servers in upstream ", u)
                    else
                        for _, srv in ipairs(srvs) do
                            local first = true
                            for k, v in pairs(srv) do
                                if first then
                                    first = false
                                    ngx.print("    ")
                                else
                                    ngx.print(", ")
                                end
                                if type(v) == "table" then
                                    ngx.print(k, " = {", concat(v, ", "), "}")
                                else
                                    ngx.print(k, " = ", v)
                                end
                            end
                            ngx.print("\\n")
                        end
                    end
                end
            ';
        }
    }
}